//
//  AddMusicItemViewModel.swift
//  MusicItemsDigitalDiscography
//
//  Created by Nazar Bahatchenko on 25.04.2024.
//

import Foundation
import Firebase
import FirebaseFirestore
import FirebaseStorage

@MainActor
class AddMusicItemViewModel: ObservableObject {
    @Published var isLoading = false
    @Published var alertMessage: String?
    
    let db = Firestore.firestore()
    let storage = Storage.storage().reference()
    
    /*   func addMusicItem(ownerUID: String, title: String, year: String, country: String, label: String, genre: String, style: String, barcode: String, catno: String, imageData: Data?, isPublic: Bool) {
     isLoading = true
     if let imageData = imageData {
     let imageRef = storage.child("images/\(ownerUID)/\(UUID().uuidString).jpg")
     imageRef.putData(imageData, metadata: nil) { [weak self] metadata, error in
     guard let self = self else { return }
     guard let metadata = metadata else {
     self.isLoading = false
     self.alertMessage = "Error uploading image: \(error?.localizedDescription ?? "Unknown error")"
     return
     }
     imageRef.downloadURL { [weak self] url, error in
     guard let self = self else { return }
     guard let coverImageUrl = url else {
     self.isLoading = false
     self.alertMessage = "Error getting download URL: \(error?.localizedDescription ?? "Unknown error")"
     return
     }
     self.createMusicItem(ownerUID: ownerUID, title: title, year: year, country: country, label: label, genre: genre, style: style, barcode: barcode, catno: catno, coverImageUrl: coverImageUrl.absoluteString, isPublic: isPublic)
     }
     }
     } else {
     createMusicItem(ownerUID: ownerUID, title: title, year: year, country: country, label: label, genre: genre, style: style, barcode: barcode, catno: catno, coverImageUrl: nil, isPublic: isPublic)
     }
     }
     
     private func createMusicItem(ownerUID: String, title: String, year: String, country: String, label: String, genre: String, style: String, barcode: String, catno: String, coverImageUrl: String?, isPublic: Bool) {
     let musicItemRef = db.collection("musicItems").document() // Creates a new document with an auto-generated ID
     
     musicItemRef.setData([
     "ownerUID": ownerUID,  // Identifies the user who owns this music item
     "title": title,
     "year": year,  // Optional fields need handling if nil
     "country": country,
     "label": label,
     "genre": genre,
     "style": style,
     "barcode": barcode,
     "catno": catno,
     "coverImage": coverImageUrl ?? "",
     "isPublic": isPublic,
     "addedDate": Timestamp(date: Date()),
     // Assuming other optional fields are handled similarly if required
     "uri": "",
     "thumb": "",
     "resourceUrl": ""
     ]) { [weak self] error in
     guard let self = self else { return }
     self.isLoading = false
     if let error = error {
     self.alertMessage = "Error writing document: \(error.localizedDescription)"
     print("Firestore write error: \(error.localizedDescription)")
     } else {
     self.alertMessage = "Music Item successfully added."
     print("Music item added successfully with ID: \(musicItemRef.documentID)")
     }
     }
     }
     */
    
    func addMusicItemWithoutImage(ownerUID: String, title: String, year: String, country: String, label: String?, genre: String?, style: String?, barcode: String?, catno: String?, isPublic: Bool) async {
        isLoading = true
        let musicItemRef = db.collection("users").document(ownerUID).collection("userMusicItems").document()  // Auto-generated ID
        
        let documentID = musicItemRef.documentID  // Capture the document ID generated by Firestore
        
        var data: [String: Any] = [
            "id": documentID,  // Explicitly include the ID in the document
            "ownerUID": ownerUID,
            "title": title,
            "year": year,
            "country": country,
            "isPublic": isPublic,
            "addedDate": Timestamp(date: Date()),
            "lastEdited": Timestamp(date: Date()),
            "uri": "",
            "thumb": "",
            "resourceUrl": "",
            "coverImage": "",
            "format": []
        ]
        
        // Add optional fields only if they have values
        if let label = label, !label.isEmpty { data["label"] = [label] }
        if let genre = genre, !genre.isEmpty { data["genre"] = [genre] }
        if let style = style, !style.isEmpty { data["style"] = [style] }
        if let barcode = barcode, !barcode.isEmpty { data["barcode"] = barcode }
        if let catno = catno, !catno.isEmpty { data["catno"] = catno }
        
        do {
            try await musicItemRef.setData(data)
            DispatchQueue.main.async { [weak self] in
                guard let self = self else { return }
                self.isLoading = false
                self.alertMessage = "Music Item successfully added."
            }
        } catch let error {
            DispatchQueue.main.async { [weak self] in
                guard let self = self else { return }
                self.isLoading = false
                self.alertMessage = "Error writing document: \(error.localizedDescription)"
            }
        }
    }
    
    func deleteMusicItem(itemId: String, ownerUID: String, coverImageUrl: String?) {
        // Reference the user's collection of music items
        let userMusicItemsRef = db.collection("users").document(ownerUID).collection("musicItems")
        
        // Delete the document from the user's collection
        userMusicItemsRef.document(itemId).delete { error in
            if let error = error {
                print("Error removing document: \(error.localizedDescription)")
                // Optionally, show an error message to the user interface
            } else {
                // If there is an image URL, delete the image from storage
                if let coverImageUrl = coverImageUrl, let url = URL(string: coverImageUrl) {
                    let path = url.deletingLastPathComponent().path
                    self.storage.child(path).delete { error in
                        if let error = error {
                            print("Error removing image from storage: \(error.localizedDescription)")
                            // Optionally, show an error message to the user interface
                        }
                    }
                }
            }
        }
    }
    
}
